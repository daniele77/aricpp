/*******************************************************************************
 * ARICPP - ARI interface for C++
 * Copyright (C) 2019 Daniele Pallastrelli
 *
 * This file is part of aricpp.
 * For more information, see http://github.com/daniele77/aricpp
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/


#ifndef ARICPP_PLAYBACK_H_
#define ARICPP_PLAYBACK_H_

#include <string>
#include "proxy.h"
#include "client.h"

namespace aricpp
{

class Playback
{
public:
    Playback() = default;
    Playback(const Playback&) = default;
    Playback(Playback&&) = default;
    Playback& operator=(const Playback&) = default;
    Playback& operator=(Playback&&) = default;

    const std::string& Id() const { return id; }

    Proxy& Stop()
    {
        if (id.empty()) return Proxy::CreateEmpty();

        return Proxy::Command(Method::delete_, "/ari/playbacks/"+id, client);
    }
private:
    friend class Channel;
    friend class Bridge;
    friend class AriModel;

    Playback(Client* _client) : 
        id(NextId()), client(_client)
    {}

    Playback(const std::string& _id, Client* _client) : 
        id(_id), client(_client)
    {}

    static std::string NextId()
    {
        static unsigned long  long nextId = 0;
        return "aricpp-p" + std::to_string(nextId++);
    }

    std::string id;
    Client* client;
};

inline bool operator == (const Playback& lhs, const Playback& rhs)
{
    return lhs.Id() == rhs.Id();
}

inline bool operator != (const Playback& lhs, const Playback& rhs)
{
    return lhs.Id() != rhs.Id();
}

} // namespace aricpp

#endif
