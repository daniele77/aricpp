/*******************************************************************************
 * ARICPP - ARI interface for C++
 * Copyright (C) 2017-2021 Daniele Pallastrelli
 *
 * This file is part of aricpp.
 * For more information, see http://github.com/daniele77/aricpp
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/


#ifndef ARICPP_BRIDGE_H_
#define ARICPP_BRIDGE_H_

#include "client.h"
#include "channel.h"
#include "method.h"
#include "playback.h"
#include "proxy.h"
#include "recording.h"
#include "terminationdtmf.h"
#include "urlencode.h"
#include <string>
#include <utility>

namespace aricpp
{

class Bridge
{
public:

    ///////////////////////////////////////////////////////////////
    // Role smart enum

    // all this machinery to initialize static members in the header file

    class Role; // forward declaration

    template<class Dummy>
    struct RoleBase
    {
        static const Role announcer;
        static const Role participant;
    };

    class Role : public RoleBase<void>
    {
    public:
        explicit operator std::string() const { return value; }
    private:
        friend struct RoleBase<void>;
        explicit Role(const char* v) noexcept : value(v) {}
        const std::string value;
    };

    ///////////////////////////////////////////////////////////////
    // Type smart enum

    // all this machinery to initialize static members in the header file

    class Type; // forward declaration

    template<class Dummy>
    struct TypeBase
    {
        static const Type mixing;
        static const Type holding;
        static const Type dtmf_events;
        static const Type proxy_media;
        static const Type video_sfu;
    };

    class Type : public TypeBase<void>
    {
    public:
        explicit operator std::string() const { return value; }
        Type operator | (const Type& rhs) const
        {
            Type result(value + ',' + static_cast<std::string>(rhs));
            return result;
        }
    private:
        friend struct TypeBase<void>;
        explicit Type(const char* v) noexcept : value(v) {}
        explicit Type(std::string  v) noexcept : value(std::move(v)) {}
        const std::string value;
    };

    ///////////////////////////////////////////////////////////////

    Bridge(const Bridge& rhs) = delete;
    Bridge& operator=(const Bridge& rhs) = delete;
    Bridge(Bridge&& rhs) noexcept : id(std::move(rhs.id)), client(rhs.client) { rhs.id.clear(); }
    Bridge& operator=(Bridge&& rhs) noexcept
    {
        if ( &rhs != this )
        {
            id = rhs.id;
            client = rhs.client;
            rhs.id.clear();
        }
        return *this;
    }

    /// Destroy the object and the asterisk bridge
    ~Bridge() { Destroy(); }

    Proxy Add(const Channel& ch, bool mute=false, const Role& role=Role::participant)
    {
        return Proxy::Command(
            Method::post,
            "/ari/bridges/" + id +
            "/addChannel?channel=" + ch.Id() +
            "&mute=" + (mute ? "true" : "false") +
            "&role=" + static_cast<std::string>(role),
            client
        );
    }

    Proxy Add(std::initializer_list<const Channel*> chs)
    {
        std::string req = "/ari/bridges/" + id + "/addChannel?channel=";
        for (auto ch : chs)
            req += ch->Id() + ',';
        req.pop_back(); // removes trailing ','
        return Proxy::Command(Method::post, req, client);
    }

    Proxy Remove(const Channel& ch)
    {
        return Proxy::Command(
            Method::post,
            "/ari/bridges/" + id +
            "/removeChannel?channel=" + ch.Id(),
            client
        );
    }

    Proxy StartMoh(const std::string& mohClass={})
    {
        std::string query = "/ari/bridges/" + id + "/moh";
        if ( !mohClass.empty() ) query += "?mohClass=" + mohClass;
        return Proxy::Command(Method::post, query, client);
    }

    Proxy StopMoh()
    {
        return Proxy::Command(Method::delete_, "/ari/bridges/" + id + "/moh", client);
    }

#ifdef ARICPP_DEPRECATED_API
    [[deprecated("Use the Play method with std::chrono parameters instead")]]
    ProxyPar<Playback> Play(const std::string& media, const std::string& lang,
                             int offsetms, int skipms=-1) const
    {
        if (offsetms == -1) offsetms = 0;
        if (skipms == -1) skipms = 0;
        return Play(media, lang, std::chrono::milliseconds(offsetms), std::chrono::milliseconds(skipms));
    }
#endif // ARICPP_DEPRECATED_API
    ProxyPar<Playback> Play(const std::string& media,
                             const std::string& lang={},
                             const std::chrono::milliseconds& offset = std::chrono::milliseconds::zero(),
                             const std::chrono::milliseconds& skip = std::chrono::milliseconds::zero()
    ) const
    {
        Playback playback(client);
        return ProxyPar<Playback>::Command(
            Method::post,
            "/ari/bridges/"+id+"/play?"
            "media=" + UrlEncode(media) +
            ( lang.empty() ? "" : "&lang=" + lang ) +
            "&playbackId=" + playback.Id() +
            ( offset == std::chrono::milliseconds::zero() ? "" : ("&offsetms=" + std::to_string(offset.count())) ) +
            ( skip == std::chrono::milliseconds::zero() ? "" : ("&skipms=" + std::to_string(skip.count())) ),
            client,
            playback
        );
    }

#ifdef ARICPP_DEPRECATED_API
    [[deprecated("Use the Record method with std::chrono parameters instead")]]
    ProxyPar<Recording> Record(const std::string& name, const std::string& format,
                  int maxDurationSeconds, int maxSilenceSeconds=-1,
                  const std::string& ifExists={}, bool beep=false, const TerminationDtmf& terminateOn=TerminationDtmf::none) const
    {
        if (maxDurationSeconds == -1) maxDurationSeconds = 0;
        if (maxSilenceSeconds == -1) maxSilenceSeconds = 0;
        return Record(name, format, std::chrono::seconds(maxDurationSeconds), std::chrono::seconds(maxSilenceSeconds), ifExists, beep, terminateOn);
    }
#endif // ARICPP_DEPRECATED_API

    ProxyPar<Recording> Record(
        const std::string& name,
        const std::string& format,
        const std::chrono::seconds& maxDuration = std::chrono::seconds::zero(),
        const std::chrono::seconds& maxSilence = std::chrono::seconds::zero(),
        const std::string& ifExists={},
        bool beep=false,
        const TerminationDtmf& terminateOn=TerminationDtmf::none
    ) const
    {
        Recording recording(name, client);
        return ProxyPar<Recording>::Command(
            Method::post,
            "/ari/bridges/"+id+"/record?"
            "name=" + UrlEncode(name) +
            "&format=" + format +
            "&terminateOn=" + static_cast<std::string>(terminateOn) +
            ( beep ? "&beep=true" : "&beep=false" ) +
            ( ifExists.empty() ? "" : "&ifExists=" + ifExists ) +
            ( maxDuration == std::chrono::seconds::zero() ? "" : ("&maxDurationSeconds=" + std::to_string(maxDuration.count())) ) +
            ( maxSilence == std::chrono::seconds::zero() ? "" : ("&maxSilenceSeconds=" + std::to_string(maxSilence.count())) ),
            client,
            recording
        );
    }

    Proxy Destroy()
    {
        if ( IsDead() ) return Proxy::CreateEmpty();
        isDead = true;
        return Proxy::Command(Method::delete_, "/ari/bridges/"+id, client);
    }

    bool IsDead() const { return isDead; }

    const std::string& Id() const { return id; }

private:

    friend class AriModel;

    Bridge(std::string  _id, std::string  _technology, std::string  _bridge_type, Client* _client) :
        id(std::move(_id)), technology(std::move(_technology)), bridge_type(std::move(_bridge_type)), client(_client)
    {}

    std::string id;
    std::string technology;
    std::string bridge_type;
    Client* client;
    bool isDead = false;
};

template<class Dummy> const Bridge::Role Bridge::RoleBase<Dummy>::announcer{"announcer"};
template<class Dummy> const Bridge::Role Bridge::RoleBase<Dummy>::participant{"participant"};

template<class Dummy> const Bridge::Type Bridge::TypeBase<Dummy>::mixing{"mixing"};
template<class Dummy> const Bridge::Type Bridge::TypeBase<Dummy>::holding{"holding"};
template<class Dummy> const Bridge::Type Bridge::TypeBase<Dummy>::dtmf_events{"dtmf_events"};
template<class Dummy> const Bridge::Type Bridge::TypeBase<Dummy>::proxy_media{"proxy_media"};
template<class Dummy> const Bridge::Type Bridge::TypeBase<Dummy>::video_sfu{"video_sfu"};

} // namespace aricpp

#endif
