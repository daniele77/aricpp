/*******************************************************************************
 * ARICPP - ARI interface for C++
 * Copyright (C) 2017-2021 Daniele Pallastrelli
 *
 * This file is part of aricpp.
 * For more information, see http://github.com/daniele77/aricpp
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef ARICPP_TERMINATIONDTMF_H_
#define ARICPP_TERMINATIONDTMF_H_

#include <string>

namespace aricpp
{

// TerminationDtmf smart enum

// all this machinery to initialize static members in the header file

class TerminationDtmf; // forward declaration

template<class Dummy>
struct TerminationDtmfBase
{
    static const TerminationDtmf none;
    static const TerminationDtmf any;
    static const TerminationDtmf asterisk;
    static const TerminationDtmf pound;
};

class TerminationDtmf : public TerminationDtmfBase<void>
{
public:
    explicit operator std::string() const { return value; }

private:
    friend struct TerminationDtmfBase<void>;
    explicit TerminationDtmf(const char* v) noexcept : value(v) {}
    const std::string value;
};

template<class Dummy> const TerminationDtmf TerminationDtmfBase<Dummy>::none{"none"};
template<class Dummy> const TerminationDtmf TerminationDtmfBase<Dummy>::any{"any"};
template<class Dummy> const TerminationDtmf TerminationDtmfBase<Dummy>::asterisk{"*"};
template<class Dummy> const TerminationDtmf TerminationDtmfBase<Dummy>::pound{"#"};

} // namespace aricpp

#endif
